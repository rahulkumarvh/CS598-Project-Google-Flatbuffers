# automatically generated by the FlatBuffers compiler, do not modify

# namespace: CS598

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Meta(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Meta()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsMeta(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Meta
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Meta
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Meta
    def Dtype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def MetaStart(builder):
    builder.StartObject(2)

def Start(builder):
    MetaStart(builder)

def MetaAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def AddName(builder, name):
    MetaAddName(builder, name)

def MetaAddDtype(builder, dtype):
    builder.PrependInt8Slot(1, dtype, 0)

def AddDtype(builder, dtype):
    MetaAddDtype(builder, dtype)

def MetaEnd(builder):
    return builder.EndObject()

def End(builder):
    return MetaEnd(builder)
